// 19-bit CPU Architecture

module RegisterFile(
    input clk,
    input [2:0] addr_in1, addr_in2, addr_out,
    input [15:0] data_in,
    input write_en,
    output reg [15:0] data_out1, data_out2
);
    reg [15:0] registers [7:0];  // 8 registers, 16-bits each

    always @(posedge clk) begin
        if (write_en)
            registers[addr_out] <= data_in;
    end

    always @(*) begin
        data_out1 = registers[addr_in1];
        data_out2 = registers[addr_in2];
    end
endmodule

module ALU(
    input [15:0] operand1, operand2,
    input [3:0] operation_code,  // Operation code
    output reg [15:0] result,
    output reg is_zero
);
    always @(*) begin
        case(operation_code)
            4'b0000: result = operand1 + operand2;  // ADD
            4'b0001: result = operand1 - operand2;  // SUB
            4'b0010: result = operand1 * operand2;  // MUL
            4'b0011: result = operand1 / operand2;  // DIV
            4'b0100: result = operand1 & operand2;  // AND
            4'b0101: result = operand1 | operand2;  // OR
            4'b0110: result = operand1 ^ operand2;  // XOR
            4'b0111: result = ~operand1;            // NOT
            default: result = 16'b0;
        endcase
        is_zero = (result == 16'b0) ? 1 : 0;  // Zero flag
    end
endmodule

module ControlUnit(
    input [18:0] instr,  // 19-bit instruction
    output reg [5:0] opcode_out,
    output reg [2:0] reg_in1, reg_in2, reg_in3,
    output reg [6:0] address_out
);
    always @(*) begin
        opcode_out = instr[18:13];  // 6-bit opcode
        reg_in1 = instr[12:10];     // 3-bit register 1
        reg_in2 = instr[9:7];       // 3-bit register 2
        reg_in3 = instr[6:4];       // 3-bit register 3
        address_out = instr[3:0];   // 7-bit address or immediate
    end
endmodule

module CPU(
    input clk,
    input [18:0] instr,
    output [15:0] alu_result
);
    wire [5:0] opcode;
    wire [2:0] reg1, reg2, reg3;
    wire [6:0] addr;
    wire [15:0] reg_data1, reg_data2;
    wire [15:0] alu_output;
    wire zero_flag;
    wire reg_write_enable;

    // Instantiate the RegisterFile
    RegisterFile rf(clk, reg1, reg2, reg3, alu_output, reg_write_enable, reg_data1, reg_data2);

    // Instantiate the ALU
    ALU alu(reg_data1, reg_data2, opcode, alu_output, zero_flag);

    // Instantiate the Control Unit
    ControlUnit cu(instr, opcode, reg1, reg2, reg3, addr);

    // Control logic for writing back data to registers
    always @(*) begin
        if (opcode == 6'b000000)  // ADD operation
            reg_write_enable = 1;
        else if (opcode == 6'b000001)  // SUB operation
            reg_write_enable = 1;
        else
            reg_write_enable = 0;
    end

    // Output the ALU result
    assign alu_result = alu_output;
endmodule

// Testbench
module tb_CPU;
    reg clk;
    reg [18:0] instr;
    wire [15:0] alu_result;

    CPU cpu(clk, instr, alu_result);

    // Clock generation
    always begin
        #5 clk = ~clk;
    end

    // Test sequence
    initial begin
        clk = 0;
        instr = 19'b0000000000000001001;  // ADD operation: r1 = r2 + r3
        #10 instr = 19'b0000010000000001001;  // SUB operation: r1 = r2 - r3
        #10 instr = 19'b0000100000000001001;  // MUL operation: r1 = r2 * r3
        #10 $finish;
    end

    // Monitor the result
    initial begin
        $monitor("Time: %0d, ALU Result: %h", $time, alu_result);
    end
endmodule
